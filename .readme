# Camster Docker Application

This README provides instructions on how to run the Camster Docker application on a Debian-based Linux distribution using USB webcams.

## Prerequisites

### Docker

Ensure that Docker is installed on your Debian system.

You can install Docker by running the following commands:

```bash
sudo apt update
sudo apt install docker.io -y
sudo systemctl start docker
sudo systemctl enable docker
```

Verify the installation:

```bash
docker --version
```

### USB Webcams

Ensure that your USB webcams are connected and recognized by the system.

You can check if the webcams are detected by running:

```bash
ls /dev/video*
```

This should list devices like /dev/video0, /dev/video1, etc.

### PulseAudio (Optional for Audio Integration)

If you need audio integration with your webcams, you may need to ensure PulseAudio is installed and running. Install it using:

```bash
sudo apt install pulseaudio -y
```

Ensure PulseAudio is running:

```bash
pulseaudio --start
```

## Pulling the Docker Image

Open a terminal and pull the Docker image from Docker Hub:

```bash
docker pull snarkvader/camster:latest
```

## Running the Docker Container

### Create the Bash Script

Create a new file called `run_camster.sh` in your desired directory.

Open the file in a text editor and paste the following code:

```bash
#!/bin/bash

# Start the base command
cmd="docker run -d \
    --name camster \
    --device /dev/snd \
    --group-add audio \
    -e PULSE_SERVER=unix:${XDG_RUNTIME_DIR}/pulse/native \
    -v ${XDG_RUNTIME_DIR}/pulse/native:${XDG_RUNTIME_DIR}/pulse/native \
    -v ~/.config/pulse/cookie:/root/.config/pulse/cookie \
    -p 8000:80"

# Check if /dev/video0 exists and add it to the command
if [ -c /dev/video0 ]; then
    cmd="$cmd --device=/dev/video0"
fi

# Check if /dev/video1 exists and add it to the command
if [ -c /dev/video1 ]; then
    cmd="$cmd --device=/dev/video1"
fi

# Check if /dev/video2 exists and add it to the command
if [ -c /dev/video2 ]; then
    cmd="$cmd --device=/dev/video2"
fi

# Add the image name at the end of the command
cmd="$cmd snarkvader/camster:latest"

# Execute the final command
eval $cmd
```

Save the file and close the text editor.

### Make the Script Executable

```bash
chmod +x run_camster.sh
```

## Accessing the Application

### Run the Script

Run the script to start the Docker container:

```bash
./run_camster.sh
```

### Open the Application

Open a web browser and navigate to:

```
http://localhost:8000
```

This should display the interface for the Camster application.

## Stopping and Removing the Container

To stop the running container:

```bash
docker stop camster
```

To remove the container after stopping it:

```bash
docker rm camster
```

## Additional Notes

- **Multiple Webcams**: The script automatically detects up to three webcams. If you have more webcams, adjust the script to include additional `--device /dev/videoX` flags.
- **Persistent Data**: If your application needs to persist data, consider using Docker volumes to map a local directory to a directory inside the container.
- **Debugging**: If you encounter issues, you can access the container's shell using:

```bash
docker exec -it camster /bin/bash
```